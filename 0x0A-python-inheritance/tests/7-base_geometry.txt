7. Integer validator module
===============================

Import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Tests
=====

------- With right parameters -------

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("width", 89)


------- Type Errors -------

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer

    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] nan must be an integer

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", (4, ))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", 'Monty Python')
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", [])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'


------------ Value Errors -------------------

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0


------------ Normal Exceptions -------------

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented
